#setting dataframe
df1 <- read.csv("hanwoo1.txt")
View(df1)
#setting dataframe
df <- read.csv("hanwoo2.txt")
df_train <- df_norm[1:8000,]
df_test <- df_norm[8001:10921,]
df_train <- df[1:8000,]
df_test <- df[8001:10921,]
#SVM
# begin by training a simple linear SVM
library(kernlab)
View(df_train)
#SVM
# begin by training a simple linear SVM
library(kernlab)
grade_classifier <- ksvm(gradeNm ~ 등지방 + 등심단면적 + 도체중 + 육량지수 + 근내지방 + month, data = df_train,
kernel = "vanilladot")
# look at basic information about the model
grade_classifier
## Step 4: Evaluating model performance ----
# predictions on testing dataset
grade_predictions <- predict(grade_classifier, df_test)
head(letter_predictions)
## Step 4: Evaluating model performance ----
# predictions on testing dataset
grade_predictions <- predict(grade_classifier, df_test)
head(grade_predictions)
table(grade_predictions, letters_test$letter)
table(grade_predictions, grade_test$gradeNm)
## Step 4: Evaluating model performance ----
# predictions on testing dataset
grade_predictions <- predict(grade_classifier, df_test)
head(grade_predictions)
table(grade_predictions, df_test$gradeNm)
# look only at agreement vs. non-agreement
# construct a vector of TRUE/FALSE indicating correct/incorrect predictions
agreement <- grade_predictions == df_test$gradeNm
table(agreement)
prop.table(table(agreement))
grade_classifier_rbf <- ksvm(gradeNm ~ 등지방 + 등심단면적 + 도체중 + 육량지수 + 근내지방 + month, data = df_train,
kernel = "rbfdot")
grade_predictions_rbf <- predict(grade_classifier_rbf, df_test)
agreement_rbf <- grade_predictions_rbf == df_test$gradeNm
table(agreement_rbf)
prop.table(table(agreement_rbf))
View(df1)
lm(gradeNm ~ 등지방 + 등심단면적 + 도체중 + 육량지수 + 근내지방 + month, data = df_train)
lm(gradeNm ~ 등지방 + 등심단면적 + 도체중 + 육량지수 + 근내지방 + month, data = df_train) %>% summary
library(tidyverse)
lm(gradeNm ~ 등지방 + 등심단면적 + 도체중 + 육량지수 + 근내지방 + month, data = df_train) %>% summary
library(RWeka)
library(neuralnet)
df <- read.csv("hanwoo2.txt")
df <- read.csv("hanwoo2.txt")
dir9
dir()
df <- read.csv("hanwoo2.txt")
install.packages("readr")
library(readr)
df <- read_csv("hanwoo2.txt")
?read_csv
df <- read_csv("hanwoo2.txt",encoding="UTF-8")
df <- read_csv("hanwoo2.txt",Encoding("UTF-8"))
View(df)
df <- read_csv("hanwoo2.txt")
df <- read_csv("hanwoo2.txt",fileEncoding="UTF-8")
install.packages("fread")
library(data.table)
install.packages("data.table")
library(data.table)
df <- fread("hanwoo2.txt")
View(df)
df <- fread("hanwoo2.txt",encoding="UTF-8")
View(df)
df <- read.table("hanwoo2.txt",encoding="UTF-8")
df <- read.table("hanwoo2.txt",fileEncoding = "UTF-8")
df <- read.table("hanwoo1.txt",fileEncoding = "UTF-8")
df <- read.table("hanwoo1.txt")
df <- read.table("hanwoo1.txt",fileEncoding = "CP949", encoding = "UTF-8")
df <- read.table("hanwoo1.txt",fileEncoding="euc-kr")
df <- read.table("hanwoo2.txt",fileEncoding="euc-kr")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
df <- read.table("hanwoo2.txt")
df <- read.table("hanwoo2.txt",fileEncoding="euc-kr")
df <- read.table("hanwoo2.txt")
dir()
readxl::read_excel("hanwoo2.txt")
readr::read_csv("hanwoo2.txt")
readr::read_csv("hanwoo2.txt",encoding="UTF-8")
readr::read_csv("hanwoo2.txt",encoding("UTF-8"))
readr::read_csv("hanwoo2.txt",fileEncoding="UTF-8")
library(readr)
guess_encoding("hanwoo2.txt")
df <- read.csv("hanwoo2.txt",fileEncoding = "EUC-KR")
View(df)
df_train <- df[1:8000,]
df_test <- df[8001:10921,]
dyn.load('/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')
library(RWeka)
library(neuralnet)
View(df)
install.packages("ggvis")
library(ggvis)
df %>% ggvis(~등심단면적, ~windex)
df %>% ggvis(~도체중) %>% layer_boxplots
df %>% ggvis(~wgrade, ~windex) %>% layer_boxplots
library(dplyr)
df <- filter(df, is.na(windex)==FALSE)
df_train <- df[1:8000,]
df_test <- df[8001:10920,]
df %>% ggvis(~wgrade, ~windex) %>% layer_boxplots
df <- filter(df, windex > 50)
df %>% ggvis(~wgrade, ~windex) %>% layer_boxplots
